from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split, StratifiedKFold
from sklearn.svm import SVC
from sklearn.metrics import classification_report
from sklearn.preprocessing import MinMaxScaler

#Step 3: Separating the dependent 'bugs' and independent variables 'metrics'

# Load and preprocess data
df = pd.read_csv('/content/drive/My Drive/Data/velocity-1.6.csv')
df[df.columns[-1]] = df[df.columns[-1]].apply(lambda x: 1 if x != 0 else 0)
y = df[df.columns[-1]]
X = df.drop(df.columns[-1], axis=1)
X = X.drop(X.columns[0:3], axis=1)

# Apply Min-Max scaling to features
scaler = MinMaxScaler()
X = scaler.fit_transform(X)

# Initialize SVM classifier
svm_classifier = SVC(kernel='linear')

# Initialize k-fold cross-validation
k_fold = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

# Lists to store evaluation results
accuracy_scores = []

for train_idx, test_idx in k_fold.split(X, y):
    X_train, X_test = X[train_idx], X[test_idx]
    y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]  # Corrected this line
    
    # Apply SMOTE for oversampling the minority class
    smote = SMOTE(random_state=42)
    X_resampled, y_resampled = smote.fit_resample(X_train, y_train)
    
    # Calculate Information Gain for each feature
    information_gains = mutual_info_classif(X_resampled, y_resampled)
    
    # Sort features based on Information Gain
    selected_feature_indices = np.argsort(information_gains)[-10:]  # Select top 10 features
    
    # Use selected features to filter X_train and X_test
    X_train_selected = X_resampled[:, selected_feature_indices]
    X_test_selected = X_test[:, selected_feature_indices]
    
    # Train the SVM classifier on selected features
    svm_classifier.fit(X_train_selected, y_resampled)
    
    # Make predictions on selected feature test data
    y_pred = svm_classifier.predict(X_test_selected)
    
    # Calculate accuracy and store it
    accuracy = np.mean(y_pred == y_test)
    accuracy_scores.append(accuracy)

# Calculate mean accuracy across folds
mean_accuracy = np.mean(accuracy_scores)
print("Mean Accuracy:", mean_accuracy)
